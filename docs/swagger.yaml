basePath: /api
definitions:
  models.LoginUser:
    properties:
      email:
        type: string
      password:
        maxLength: 50
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  models.RegisterUser:
    properties:
      email:
        type: string
      name:
        maxLength: 50
        minLength: 3
        type: string
      password:
        type: string
    required:
    - email
    - name
    type: object
  models.Token:
    properties:
      token:
        type: string
    type: object
  models.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      roles:
        items:
          type: string
        type: array
      updated_at:
        type: string
    type: object
info:
  contact: {}
  description: This is a sample server for a clean API.
  title: Clean API
paths:
  /users:
    get:
      consumes:
      - application/json
      description: Get all users
      parameters:
      - in: query
        name: page
        type: integer
      - in: query
        name: size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
      summary: Get all users
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - ApiKeyAuth: []
      summary: Delete user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: Get user by ID
      tags:
      - users
  /users/current:
    get:
      consumes:
      - application/json
      description: Get current user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      security:
      - ApiKeyAuth: []
      summary: Get current user
      tags:
      - users
  /users/login:
    post:
      consumes:
      - application/json
      description: Login user
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.LoginUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Token'
      summary: Login user
      tags:
      - users
  /users/register:
    post:
      consumes:
      - application/json
      description: Register user
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.RegisterUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Token'
      summary: Register user
      tags:
      - users
schemes:
- http
- https
securityDefinitions:
  ApiKeyAuth:
    description: Type "Bearer" followed by a space and JWT token
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
